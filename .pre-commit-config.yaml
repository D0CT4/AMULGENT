# Pre-commit hooks configuration for AMULGENT
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# To install the git hooks:
#   pip install pre-commit
#   pre-commit install
#
# To run manually:
#   pre-commit run --all-files

default_language_version:
  python: python3.8

repos:
  # General checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        args: ['--safe']
      - id: check-toml
        name: Check TOML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-case-conflict
        name: Check for case conflicts
      - id: detect-private-key
        name: Detect private keys
      - id: mixed-line-ending
        name: Check mixed line endings
        args: ['--fix=lf']
      - id: check-docstring-first
        name: Check docstring is first
      - id: check-ast
        name: Check Python AST
      - id: debug-statements
        name: Check for debug statements
      - id: name-tests-test
        name: Verify test file naming
        args: ['--pytest-test-first']

  # Black - Code formatter
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Format code with Black
        language_version: python3.8
        args: ['--line-length=88']
        exclude: ^(docs/|tests/fixtures/)

  # isort - Import sorter
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports with isort
        args:
          - '--profile=black'
          - '--line-length=88'
          - '--multi-line=3'
          - '--trailing-comma'
        exclude: ^(docs/|tests/fixtures/)

  # flake8 - Linter
  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: Lint with flake8
        args:
          - '--max-line-length=88'
          - '--extend-ignore=E203,E501,W503'
          - '--max-complexity=10'
        exclude: ^(docs/|tests/fixtures/|__pycache__/)
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # pylint - Advanced linter
  - repo: https://github.com/PyCQA/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: Lint with pylint
        args:
          - '--max-line-length=88'
          - '--disable=C0111,C0103,R0913,R0914,W0212,C0301'
          - '--good-names=i,j,k,ex,_,id,df'
        exclude: ^(docs/|tests/|setup.py)
        additional_dependencies:
          - pytest
          - hypothesis

  # bandit - Security linter
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Security check with bandit
        args:
          - '-ll'  # Only show medium and high severity
          - '-i'   # Show confidence
          - '-r'   # Recursive
          - 'aimulgent/'
        exclude: ^(tests/|docs/)
        pass_filenames: false

  # mypy - Type checker
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type check with mypy
        args:
          - '--ignore-missing-imports'
          - '--no-strict-optional'
          - '--warn-unreachable'
          - '--show-error-codes'
        exclude: ^(docs/|tests/fixtures/|setup.py)
        additional_dependencies:
          - types-requests
          - types-setuptools

  # pydocstyle - Docstring checker
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstrings with pydocstyle
        args:
          - '--convention=google'
          - '--add-ignore=D100,D104,D107'
        exclude: ^(docs/|tests/|setup.py)

  # pytest - Run tests
  - repo: local
    hooks:
      - id: pytest-check
        name: Run pytest tests
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args:
          - 'tests/'
          - '-v'
          - '--tb=short'
          - '--maxfail=5'
        stages: [commit]

  # pytest-cov - Test coverage
  - repo: local
    hooks:
      - id: pytest-coverage
        name: Check test coverage
        entry: pytest
        language: system
        pass_filenames: false
        args:
          - 'tests/'
          - '--cov=aimulgent'
          - '--cov-report=term-missing'
          - '--cov-fail-under=70'
        stages: [push]

  # safety - Dependency security checker
  - repo: local
    hooks:
      - id: safety-check
        name: Check dependencies with safety
        entry: safety
        language: system
        args:
          - 'check'
          - '--json'
        pass_filenames: false
        stages: [push]

  # Markdown linter
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args:
          - '--fix'
          - '--disable'
          - 'MD013'  # Line length
          - 'MD033'  # Inline HTML

  # YAML linter
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        args:
          - '--strict'
          - '-d'
          - '{extends: default, rules: {line-length: {max: 120}, document-start: disable}}'

  # Check for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args:
          - '--baseline'
          - '.secrets.baseline'
        exclude: ^(tests/fixtures/|package-lock.json)

  # Prettier for JSON/YAML/Markdown formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Format with Prettier
        types_or:
          - json
          - markdown
          - yaml
        exclude: ^(tests/fixtures/)

  # Shell script linter
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Check shell scripts

# CI/CD-specific configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip:
    - pytest-check
    - pytest-coverage
    - safety-check
  submodules: false
